#!/bin/bash
#
#This script is used to compile the libraries
# Aboslute paths are denoted by APATH
# Relative paths are denoted by RPATH
#
echo "Loading compile script"
echo " "
#echo " "

#
# All possible extensions that the CPP file could have
# Only files have one of these extensions will be compile
# In other cases, the script will throw and error and 
# execution will be stopped
#
FILE_EXT=("c" "C" "cpp" "CPP" "cxx" "CXX") 


#
# Check: Arguments required 2 (two)
#        argument 1: Project Directory (name of the folder)
#        argument 2: CPP file to compile
#
if [ "$#" -ne 2 ];
then
    echo "ERROR(9001): Illegal number of parameters"
    echo 'INFO       : Compile command: wmake $PROJECT_NAME $FILE_NAME_TO_BE_COMPLIED'
#echo '      Else export the file name using following command'
#echo 'export $PROJECT_NAME'
    exit 9001
fi


# Data extracted from the arguments (if any)
# Further checks will be performed for each error case
# Expected number of arguments: 2 (two)
# The name of the project directory (first argument)
#
PROJECT_DIR="$1"

# The path/name of the file to be compiled (second argument)
# The path would depend where the script is executed
#
CXXFILE="$2" # CXX file to be compiled
#echo CXXFILE=$CXXFILE

# Extract the absolute filepath of the file to compile
CXXFILE=$(realpath "$CXXFILE")
#echo CXXFILE=$CXXFILE

# Extract the name of the file to compile if the argument
# contains path to the file to compile
CXXFILE_NAME="$(basename "$CXXFILE")"
#echo CXXFILE_NAME=$CXXFILE_NAME

# File name without extension
CXXFILE_NOEXT=${CXXFILE_NAME%%.*}
            # Remove everything after and including dot (.)
#echo CXXFILE_NOEXT=$CXXFILE_NOEXT

# File extension: will be used to check whether the argument is a C++ file
#CXXFILE_EXT="${CXXFILE_NAME##*.}" # get the file extension
CXXFILE_EXT=${CXXFILE_NAME##*.}
            # Remove everything upto dot (.)
#echo CXXFILE_EXT=$CXXFILE_EXT

# Get the directory path that contains C++ file
CXXFILE_DIR=$(dirname $CXXFILE)



#
# Check: Existence of C++ file
#        argument 1: Project Directory (name of the folder)
#        argument 2: CPP file to compile
#
if [ ! -O "$CXXFILE" ];
then
    echo "ERROR(9003): File to compile ${2} not found"
    echo 'INFO       : Check filepath '
    exit 9003
fi

#
# Check: Existence of project directory
#        argument 1: Project Directory (name of the folder)
#        argument 2: CPP file to compile
#        Use of expression matching operator (=~):
#	     Check that the substring /$PROJECT_DIR/ is present
#        in the path CXXFILE
#        Adding back slashes (/) before and after the PROJECT_DIR as
#        expected in CXXFILE_PATH
#
if [[ ! $CXXFILE =~ /${PROJECT_DIR}/ ]];
then
    echo "ERROR(9002):Project directory "$PROJECT_DIR" not found"
    echo 'INFO       : (1) Check project directory name '
    echo '             (2) Directory name must be without any trailing or leading slashes'
    exit 9002
fi



#
# Check: Verify that the file to be compiled has a valid extension
#        Valid extensions defined in a array FILE_EXT
#        Check is done by checking the file extesnsion
#        against each element of the array FILE_EXT
#
if [[ ! " ${FILE_EXT[*]} " =~  ${CXXFILE_EXT}  ]];
then
    echo 'ERROR: The file to compile is not a C++ file'
    echo 'INFO:  Check order of the arguments'
    echo '       Compile command: wmake $PROJECT_NAME $FILE_NAME_TO_BE_COMPLIED'
fi



# Construct: Construction of Project Dir Path
#            Extract substring upto project name
#            Append the extracted string with project name
#
PROJECT_DIR=${CXXFILE%$PROJECT_DIR*}$PROJECT_DIR
                    # Remove everything after the substring $PROJECT_DIR
echo PROJECT_DIR=$PROJECT_DIR
:<<END
#
# Construct the relative paths of all directories in the project
#
LIB_DIR_RPATH=$PROJECT_DIR/lib
BIN_DIR_RPATH=$PROJECT_DIR/bin
SRC_DIR_RPATH=$PROJECT_DIR/src
APP_DIR_RPATH=$PROJECT_DIR/applications
LNINCLUDE_DIR_RPATH=$PROJECT_DIR/lnInclude
END

#
# Construct the absolute paths of all directories in the project
#
LIB_DIR=$PROJECT_DIR/lib
BIN_DIR=$PROJECT_DIR/bin
SRC_DIR=$PROJECT_DIR/src
APP_DIR=$PROJECT_DIR/applications
LNINCLUDE_DIR=$PROJECT_DIR/lnInclude



:<<'END'
echo LIB_DIR=$LIB_DIR
echo BIN_DIR=$BIN_DIR
echo SRC_DIR=$SRC_DIR
echo APP_DIR=$APP_DIR
echo LNINCLUDE_DIR=$LNINCLUDE_DIR
END



# Extract path of the directory that contains the C++ file w.r.t. the src folder
# A similar structure will be created in lnInclude and lib directories
#
CXXFILE_DEPTH=${CXXFILE_DIR#*$SRC_DIR}
                 # Trim the string before and including src
#echo CXXFILE_DEPTH=$CXXFILE_DEPTH



# Create lnInclude folder
# This file contains all the symbolic links to the header files
#
if [ ! -d "$LNINCLUDE_DIR" ]
#
then
    echo "The lnInclude folder does not exist"
    echo "........Creating lnInclude........"
    mkdir $LNINCLUDE_DIR
    echo "created lnInclude folder: $LNINCLUDE_DIR"
    echo ".................................."
#
fi



# Create folders to store symbolic links
# The folder structure would be the same as the header file in src folder
#
if [ ! -d "$LNINCLUDE_DIR$CXXFILE_DEPTH" ]
#
then
    echo "The ymbolic link folder structure does not exist"
    echo "........Creating ymbolic link folder structure........"
    mkdir $LNINCLUDE_DIR$CXXFILE_DEPTH
    echo "created symbolic link folder structure: $LNINCLUDE_DIR$CXXFILE_DEPTH"
    echo ".................................."
#
fi



#
# Create links to all header files in the current folder
# Note that all the header files must be in same location as C++ files
# To create or update a symlink:
# ln -sf /path/to/file /path/to/symlink
#
# Loop over files in CXXFILE_DIR and select the header files
#
for HEADERFILE in `find ${CXXFILE_DIR}/* -name "*.H"`;  do
    HEADERFILE_NAME="$(basename "$HEADERFILE")"
    #echo HEADERFILE_NAME="$HEADERFILE_NAME"
    SYMLINK=$LNINCLUDE_DIR$CXXFILE_DEPTH/$HEADERFILE_NAME
    if [ ! -f "$SYMLINK" ]
        then
        echo "creating symbolic link to header file"
        echo $HEADERFILE
        echo "at - $SYMLINK"
        ln -sf $HEADERFILE $SYMLINK
        echo "----------------------------"
    fi
done



# Create LIB folder
# This file contains all the libraries that will be compiled
#
if [ ! -d "$LIB_DIR" ]
#
then
    echo "The folder for libraries does not exist"
    echo "........Creating LIB........"
    mkdir $LIB_DIR
    echo "created LIB folder: $LIB_DIR"
    echo ".................................."
#
fi



# Create foldes in LIB_DIR for libraries
# Folder structure would be as in the src folder
LIB_PATH=$LIB_DIR$CXXFILE_DEPTH
echo $LIB_PATH
if [ ! -d "$LIB_PATH" ]
#
then
    echo "The folder(s) for libraries does not exist"
    echo "........Creating folder structure........"
    mkdir $LIB_PATH
    echo "created LIB folder structure: $LIB_PATH"
    echo ".................................."
#
fi



#compile the CXX file


#CXXFILE_NOEXT=${CXXFILE%".C"} # remove the file extension
#echo CXXFILE_NOEXT=$CXXFILE_NOEXT
# define a build directory for temporary object files
BUILD_DIR=$PROJECT_DIR/build
echo BUILD_DIR=$BUILD_DIR


if [ ! -d "$BUILD_DIR" ]
#
then
    mkdir -p "$BUILD_DIR"
    #echo "created $build_DIR"
    #echo ".................................."
#
fi

# Create foldes in LIB_DIR for libraries
# Folder structure would be as in the src folder
BUILD_PATH=$BUILD_DIR$CXXFILE_DEPTH
echo BUILD_PATH=$BUILD_PATH
if [ ! -d "$BUILD_PATH" ]
#
then
    echo "The folder(s) in build directory for object files does not exist"
    echo "........Creating folder structure........"
    mkdir $BUILD_PATH
    echo "created build folder structure: $BUILD_PATH"
    echo ".................................."
#
fi

g++ --std=c++11 -c $CXXFILE -o $BUILD_PATH/$CXXFILE_NOEXT.o



# Create the archive (insert the lib prefix)
#EX: ar rcs libunuseful.a unuseful.o
ar rcs $LIB_PATH/lib$CXXFILE_NOEXT.a $BUILD_PATH/$CXXFILE_NOEXT.o

echo "File \"$CXXFILE_NAME\" compiled successfully"
exit 0
#######START: DO NOT REMOVE######
#rm -r $BUILD_DIR

:<<'END'
#
# Create required folders in the linked header folders
# The paths are relative
#
HEADER_FILES_PATH=$PROJECT_LNINCLUDE_DIR_PATH$CXXFILE_LOCATION
LIB_FILES_PATH=$PROJECT_LIB_DIR_PATH$CXXFILE_LOCATION
#echo HEADER_FILES_PATH=$HEADER_FILES_PATH
#echo LIB_FILES_PATH=$LIB_FILES_PATH



#
# Create the folder tree as in src in linked header folder
# This file would eventually contain all the symbolic links to the header files in src folder
#
if [ ! -d "$HEADER_FILES_PATH" ]
#
then
    mkdir -p "$HEADER_FILES_PATH"
    echo "created header links path: $HEADER_FILES_PATH"
    echo ".................................."
#
fi

#
# Create the folder tree as in src in lib folder
# This file would eventually contain all the libraries generated
#
if [ ! -d "$LIB_FILES_PATH" ]
#
then
    mkdir -p "$LIB_FILES_PATH"
    echo "created lib files path: $LIB_FILES_PATH"
    #echo ".................................."
#
fi
#echo "created $LIB_FILES_PATH"
END





##
##Check if the "CXX" to be compiled is specified
##Throw error and exit if it is not specified
##
#if [ -n "$CXXFILE"  ]
#then
#CXXFILE_PATH=$(realpath "$CXXFILE")
#echo $CXXFILE_PATH
##echo $(realpath "$2")
#else
#echo "ERROR: /!\ No file specified. Compilation Aborted /!\ "
#exit 9999 # die with error code 9999
#fi
#
#
#
#
##
## Extract the path to wmake Directory
## All the paths are extracted/created w.r.t. this Directory
##
#WMAKE_FILE=$(basename -- "$0") #filename
#ABSOLUTE_PATH_WMAKE_DIR=$(dirname -- "$0") #absolute path to the directory of wmake file

##
## Extract the PROJECT Directory
##PROJECT_DIR=$($ABSOLUTE_PATH_WMAKE_DIR | awk -F\/ '{ print $(NF-1) }')
##
#PROJECT_DIR=$((dirname -- "$0") | awk -F\/ '{ print $(NF-1) }')
##echo $PROJECT_DIR



:<<'END'
#
# Get the path to create the required directories in the linked header files folder
#
DEPTH=${CXXFILE_PATH#"$ABSOLUTE_PATH_PROJECT_SRC_DIR"}
#echo DEPTH=$DEPTH
                                        #This gives the entire path of the C file
                                        #The next step is grab the C file and the
                                        #path of the directory
                                        #that contains the C file
#CXXFILE_NAME="$(basename "${DEPTH}")"
DEPTH="$(dirname "${DEPTH}")"
                                        #This is the path without C file
#"$(dirname "${VAR}")"
#echo DEPTH=$DEPTH

#echo $ABSOLUTE_PATH_PROJECT_SRC_DIR

#Extract the filename from the path
DEPTH=${DEPTH%"/$1"} #Remove the slash after the folder name
#PATH_DEPTH=${PATH_DEPTH#"/"} #Remove the slash before the folder name
                              #/!\Do not uncomment/!\
                              #uncommenting would change the behaviour of the file
# Absolute path of the directories to be created in linked header files folder
ABSOLUTE_PATH_CURRENT_DIR=$ABSOLUTE_PATH_PROJECT_SRC_DIR$DEPTH

#echo $ABSOLUTE_PATH_CURRENT_DIR
END
#######END: DO NOT REMOVE######

#-------------------DO NOT REFER--------------------
#prefix="hell"
#suffix="ld"
#string="hello-world"
#foo=${string#"$prefix"}
#foo=${foo%"$suffix"}
#echo "${foo}"
#
